Start aplikacji:

Załadować ustawienia node, uruchomić node na dostępnym porcie.

Załadować listę sieci/nodów. Spróbować połączyć się z nodami.

Z połączonych nodów, pobrać informacje o nich i ich stanie.



procesowanie pakietow:

odebrane pakiety idą na kolejkę w connectionie.
connectionProcessor odbiera te pakiety z kolejki i odpala im ->process(context)
procesowanie np. getNodeInfo powinno uzupełnić node info, co z kolei powinno zatriggerowac wszystkie future oczekujace na to

bo np. jest jakiś wątek

{
do stuff...
node->getNodeInfo(..., [&](){and then do this};
do other stuff...
}


logika na zasadzie

source => trigger => action => result

np.

clock => @17:30 => discover_nodes => network_list updated

sync_manager => new_file => update_journal
sync_manager => journal_updated => push_info_to_other_nodes


sources manager podobny do Context - mapa<ISource>, ale jednoczesnie mozna zrobic get<Clock>, zeby wziac konkretny source

actions... jak by tu zrobic akcje

bo dalem w triggerze mozliwosc odpalenia jakiejkolwiek funkcji...

sourceManager.registerTrigger<Tick>(actionManager.getAction<Tick>("tock");
sm.registerTrigger<NetEvent>(am.getAction<NetEvent>(

logic.assignAction<EVENT>([optional: event id,]action id);

logic.aA<NetEvent,NetAction>(NetEvent::IdType::NODE_DISCOVERED,NetAction::IdType::SAVE_NODE_INFO);
logic.aA<Tick,NetAction>(150s, "sendKeepAlive");